solarData_long <- solarData_long %>%
mutate(DATE = as.Date(DATE))
# Select 6 random areas
set.seed(123)  # Setting seed for reproducibility
selected_areas <- solarData_long %>%
distinct(Areas) %>%
sample_n(6) %>%
pull(Areas)
# Filter the dataset for the selected areas
filtered_data <- solarData_long %>%
filter(Areas %in% selected_areas)
# Create faceted time series plot using timetk
filtered_data %>%
plot_time_series(
.date_var = DATE,
.value = Units,
.facet_var = Areas,
.facet_ncol = 2,
.facet_scales = "free"
)
colnames(solarData)
# Chunk 1
library(readxl)
library(dplyr)
library(FactoMineR)
library(ggplot2)
library(corrr)
library(factoextra) #Easy PCA plots and visualization
library(FactoMineR) #PCA and factor analysis functions
library(ggplot2) #Enhanced data visualization
library(dplyr) #Data manipulation
library(gridExtra) #Arranging multiple plot grids
library(gt) # For creating beautiful tables
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(viridis)
library(rmarkdown)
library(plotly)
library(shinyalert)
library(timetk)
load("df_numericVars.RData")
load("solarData.RData")
load("data.RData")
load("~/Project-2024/solarProject/solarGripObject.RData")
# Chunk 2
cor_mat_allan <- function(df, type = "pearson", digits = 3, decimal.mark = ".", use = "all", show_significance = TRUE, replace_diagonal = FALSE, replacement = "") {
# Check arguments
stopifnot({
is.numeric(digits)
digits >= 0
use %in% c("all", "upper", "lower")
is.logical(replace_diagonal)
is.logical(show_significance)
is.character(replacement)
})
# We need the Hmisc package for this
require(Hmisc)
# Retain only numeric and boolean columns
isNumericOrBoolean = vapply(df, function(x) is.numeric(x) | is.logical(x), logical(1))
if (sum(!isNumericOrBoolean) > 0) {
cat('Dropping non-numeric/-boolean column(s):', paste(names(isNumericOrBoolean)[!isNumericOrBoolean], collapse = ', '), '\n\n')
}
df = df[isNumericOrBoolean]
# Transform input data frame to matrix
x <- as.matrix(df)
# Run correlation analysis using Hmisc package
correlation_matrix <- Hmisc::rcorr(x, type = type)
R <- correlation_matrix$r # Matrix of correlation coefficients
p <- correlation_matrix$P # Matrix of p-value
# Transform correlations to specific character format
Rformatted = formatC(R, format = 'f', digits = digits, decimal.mark = decimal.mark)
# If there are any negative numbers, we want to put a space before the positives to align all
if (sum(R < 0) > 0) {
Rformatted = ifelse(R > 0, paste0(' ', Rformatted), Rformatted)
}
# Add significance levels if desired
if (show_significance) {
# Define notations for significance levels; spacing is important.
stars <- ifelse(is.na(p), "   ", ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "*  ", "   "))))
Rformatted = paste0(Rformatted, stars)
}
# Build a new matrix that includes the formatted correlations and their significance stars
Rnew <- matrix(Rformatted, ncol = ncol(x))
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep = " ")
# Replace undesired values
if (use == 'upper') {
Rnew[lower.tri(Rnew, diag = replace_diagonal)] <- replacement
} else if (use == 'lower') {
Rnew[upper.tri(Rnew, diag = replace_diagonal)] <- replacement
} else if (replace_diagonal) {
diag(Rnew) <- replacement
}
return(Rnew)
}
correlation_matrix = cor_mat_allan(df[,-c(1,2)]) %>%
as.data.frame() %>%
gt(rownames_to_stub = TRUE) %>%
tab_header(
title = md("**Correlation Matrix**"),
subtitle = "Package used: Hmisc; PB-Perfect"
) %>%
tab_source_note(
source_note = "Source: PCA - Data analysis"
) %>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width = px(3)
) %>%
opt_stylize(style = 6, color = "cyan") %>%
tab_options(table.width = pct(80)) %>%
tab_footnote(
footnote = "Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
)
correlation_matrix
# Chunk 3
# Function for covariance matrix
covariance_table=cov(df[,-c(1,2)])%>%round(2)%>%as.data.frame()%>%gt( rownames_to_stub = TRUE) %>%tab_header(
title = md("**Covariance Matrix**"),
subtitle = "Package used : agricolae; PB-Perfect"
)%>%tab_source_note(
source_note = "Source: JBS Research Lab"
)%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "cyan")%>%
tab_options(table.width = pct(80))
covariance_table
# Chunk 4
eigen_table=function(data){
library(factoextra)
library(FactoMineR)
library(gt)
data=data[,-c(1,2)]
data=na.omit(data)
pc=PCA(data,scale.unit = T, graph = F)
x=get_eigenvalue(pc)
x=t(x)
rownames(x)=c("Eigen Value","Variance %", "Cumulative Variance %")
colnames(x)=paste("PC",1:ncol(x),sep = "")
x=round(x,2)
y=eigen(cor(data))$vectors
colnames(y)=paste("PC",1:ncol(x),sep = "")
rownames(y)=colnames(data)
x=rbind(x,y)
x=as.data.frame(x)
x=round(x,2)
grp=c(rep("Eigen values and Variance %",3),rep("Eigenvectors",nrow(y)))
x_out=cbind(grp,x)
x=cbind(x,grp)
x=x%>%gt(groupname_col = "grp", rownames_to_stub = TRUE)%>%
tab_header(
title = md("**Eigenvalues and Eigenvectors**"),
subtitle = "Package used : agricolae; PB-Perfect")%>%
tab_source_note(source_note = "Source: JBS Reserach Lab")%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "cyan")%>%
tab_options(table.width = pct(80))
return(x)
}
eig_table=eigen_table(data)
eig_table
# Chunk 5
var_stats=function(data){
library(FactoMineR)
library(dplyr)
res.pca=get_pca_var(PCA(data))
res.pca=lapply(res.pca, as.data.frame)
res.pca=lapply(res.pca, function(x){colnames(x)=c(paste("PC",1:ncol(x),sep = ""));x})
res.pca=lapply(res.pca, round,2)
cor_pca=res.pca$cor
cos_pca=res.pca$cos2
contrib_pca=res.pca$contrib
grp=("Correation between PCs and Traits")
cor_pca=cbind(cor_pca,grp)
grp=("Quality of representation of Traits on PCs")
cos_pca=cbind(cos_pca,grp)
grp=c("Contributions(%) of the Traits to the Principal Components")
contrib_pca=cbind(contrib_pca,grp)
res=rbind(cor_pca, cos_pca, contrib_pca)
x=res%>%gt(groupname_col = "grp", rownames_to_stub = TRUE)%>%
tab_header(
title = md("**PCA - Trait statistics**"),
subtitle = "Package used : agricolae; PB-Perfect")%>%
tab_source_note(source_note = "Source: JBS Research Lab")%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "cyan")%>%
tab_options(table.width = pct(80))
return(x)
}
variable_stats = var_stats(data)
variable_stats
# Chunk 6
selected_data_daily <- selected_data_long %>%
mutate(Week = lubridate::floor_date(DATE, unit = "day")) %>%
group_by(Week, Areas) %>%
summarise(Units = mean(Units))
# Plotting the weekly heatmap with inverted viridis color palette
ggplot(selected_data_daily, aes(x = Week, y = Areas, fill = Units)) +
geom_tile(color = "white") +
scale_fill_viridis(option = "plasma", trans = "reverse") +  # Invert viridis color scale
labs(
title = "Daily Solar Readings",
x = "Daily",
y = "Areas",
fill = "Units"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1)
)
# Chunk 7
# Plotting the weekly heatmap with inverted viridis color palette
ggplot(selected_data_weekly, aes(x = Week, y = Areas, fill = Units)) +
geom_tile(color = "white") +
scale_fill_viridis(option = "plasma", trans = "reverse") +  # Invert viridis color scale
labs(
title = "Weekly Solar Readings",
x = "Week",
y = "Areas",
fill = "Units"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1)
)
# Chunk 8
library(dplyr)
library(timetk)
# Convert DATE to Date type if not already done
solarData_long <- solarData_long %>%
mutate(DATE = as.Date(DATE))
# Select 6 random areas
set.seed(123)  # Setting seed for reproducibility
selected_areas <- solarData_long %>%
distinct(Areas) %>%
sample_n(6) %>%
pull(Areas)
# Filter the dataset for the selected areas
filtered_data <- solarData_long %>%
filter(Areas %in% selected_areas)
# Create faceted time series plot using timetk
filtered_data %>%
plot_time_series(
.date_var = DATE,
.value = Units,
.facet_var = Areas,
.facet_ncol = 2,
.facet_scales = "free"
)
save.image("~/Project-2024/solarProject/quartoSolarSHiny/solarGripObject.RData")
rsconnect::setAccountInfo(name='jbsdashboard', token='DCF34C1BF0105B727D245FA8F7C955BE', secret='rHIh6n+mOdFpwq8f9MO4+nxNF78PVuvkcWGwg0kD')
rsconnect::setAccountInfo(name='jbsdashboard', token='DCF34C1BF0105B727D245FA8F7C955BE', secret='rHIh6n+mOdFpwq8f9MO4+nxNF78PVuvkcWGwg0kD')
library(readxl)
library(dplyr)
library(FactoMineR)
library(ggplot2)
library(corrr)
library(factoextra) #Easy PCA plots and visualization
library(FactoMineR) #PCA and factor analysis functions
library(ggplot2) #Enhanced data visualization
library(dplyr) #Data manipulation
library(gridExtra) #Arranging multiple plot grids
library(gt) # For creating beautiful tables
library(tidyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(viridis)
library(rmarkdown)
library(plotly)
library(shinyalert)
library(timetk)
load("df_numericVars.RData")
load("solarData.RData")
load("data.RData")
load("~/Project-2024/solarProject/solarGripObject.RData")
cor_mat_allan <- function(df, type = "pearson", digits = 3, decimal.mark = ".", use = "all", show_significance = TRUE, replace_diagonal = FALSE, replacement = "") {
# Check arguments
stopifnot({
is.numeric(digits)
digits >= 0
use %in% c("all", "upper", "lower")
is.logical(replace_diagonal)
is.logical(show_significance)
is.character(replacement)
})
# We need the Hmisc package for this
require(Hmisc)
# Retain only numeric and boolean columns
isNumericOrBoolean = vapply(df, function(x) is.numeric(x) | is.logical(x), logical(1))
if (sum(!isNumericOrBoolean) > 0) {
cat('Dropping non-numeric/-boolean column(s):', paste(names(isNumericOrBoolean)[!isNumericOrBoolean], collapse = ', '), '\n\n')
}
df = df[isNumericOrBoolean]
# Transform input data frame to matrix
x <- as.matrix(df)
# Run correlation analysis using Hmisc package
correlation_matrix <- Hmisc::rcorr(x, type = type)
R <- correlation_matrix$r # Matrix of correlation coefficients
p <- correlation_matrix$P # Matrix of p-value
# Transform correlations to specific character format
Rformatted = formatC(R, format = 'f', digits = digits, decimal.mark = decimal.mark)
# If there are any negative numbers, we want to put a space before the positives to align all
if (sum(R < 0) > 0) {
Rformatted = ifelse(R > 0, paste0(' ', Rformatted), Rformatted)
}
# Add significance levels if desired
if (show_significance) {
# Define notations for significance levels; spacing is important.
stars <- ifelse(is.na(p), "   ", ifelse(p < .001, "***", ifelse(p < .01, "** ", ifelse(p < .05, "*  ", "   "))))
Rformatted = paste0(Rformatted, stars)
}
# Build a new matrix that includes the formatted correlations and their significance stars
Rnew <- matrix(Rformatted, ncol = ncol(x))
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep = " ")
# Replace undesired values
if (use == 'upper') {
Rnew[lower.tri(Rnew, diag = replace_diagonal)] <- replacement
} else if (use == 'lower') {
Rnew[upper.tri(Rnew, diag = replace_diagonal)] <- replacement
} else if (replace_diagonal) {
diag(Rnew) <- replacement
}
return(Rnew)
}
correlation_matrix = cor_mat_allan(df[,-c(1,2)]) %>%
as.data.frame() %>%
gt(rownames_to_stub = TRUE) %>%
tab_header(
title = md("**Correlation Matrix**"),
subtitle = "Package used: Hmisc; PB-Perfect"
) %>%
tab_source_note(
source_note = "Source: PCA - Data analysis"
) %>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width = px(3)
) %>%
opt_stylize(style = 6, color = "cyan") %>%
tab_options(table.width = pct(80)) %>%
tab_footnote(
footnote = "Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"
)
correlation_matrix
# Function for covariance matrix
covariance_table=cov(df[,-c(1,2)])%>%round(2)%>%as.data.frame()%>%gt( rownames_to_stub = TRUE) %>%tab_header(
title = md("**Covariance Matrix**"),
subtitle = "Package used : agricolae; PB-Perfect"
)%>%tab_source_note(
source_note = "Source: JBS Research Lab"
)%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "cyan")%>%
tab_options(table.width = pct(80))
covariance_table
eigen_table=function(data){
library(factoextra)
library(FactoMineR)
library(gt)
data=data[,-c(1,2)]
data=na.omit(data)
pc=PCA(data,scale.unit = T, graph = F)
x=get_eigenvalue(pc)
x=t(x)
rownames(x)=c("Eigen Value","Variance %", "Cumulative Variance %")
colnames(x)=paste("PC",1:ncol(x),sep = "")
x=round(x,2)
y=eigen(cor(data))$vectors
colnames(y)=paste("PC",1:ncol(x),sep = "")
rownames(y)=colnames(data)
x=rbind(x,y)
x=as.data.frame(x)
x=round(x,2)
grp=c(rep("Eigen values and Variance %",3),rep("Eigenvectors",nrow(y)))
x_out=cbind(grp,x)
x=cbind(x,grp)
x=x%>%gt(groupname_col = "grp", rownames_to_stub = TRUE)%>%
tab_header(
title = md("**Eigenvalues and Eigenvectors**"),
subtitle = "Package used : agricolae; PB-Perfect")%>%
tab_source_note(source_note = "Source: JBS Reserach Lab")%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "cyan")%>%
tab_options(table.width = pct(80))
return(x)
}
eig_table=eigen_table(data)
eig_table
var_stats=function(data){
library(FactoMineR)
library(dplyr)
res.pca=get_pca_var(PCA(data))
res.pca=lapply(res.pca, as.data.frame)
res.pca=lapply(res.pca, function(x){colnames(x)=c(paste("PC",1:ncol(x),sep = ""));x})
res.pca=lapply(res.pca, round,2)
cor_pca=res.pca$cor
cos_pca=res.pca$cos2
contrib_pca=res.pca$contrib
grp=("Correation between PCs and Traits")
cor_pca=cbind(cor_pca,grp)
grp=("Quality of representation of Traits on PCs")
cos_pca=cbind(cos_pca,grp)
grp=c("Contributions(%) of the Traits to the Principal Components")
contrib_pca=cbind(contrib_pca,grp)
res=rbind(cor_pca, cos_pca, contrib_pca)
x=res%>%gt(groupname_col = "grp", rownames_to_stub = TRUE)%>%
tab_header(
title = md("**PCA - Trait statistics**"),
subtitle = "Package used : agricolae; PB-Perfect")%>%
tab_source_note(source_note = "Source: JBS Research Lab")%>%
tab_options(
heading.subtitle.font.size = 12,
heading.align = "left",
table.border.top.color = "red",
column_labels.border.bottom.color = "red",
column_labels.border.bottom.width= px(3)
)%>%opt_stylize(style = 6, color = "cyan")%>%
tab_options(table.width = pct(80))
return(x)
}
variable_stats = var_stats(data)
variable_stats
selected_data_daily <- selected_data_long %>%
mutate(Week = lubridate::floor_date(DATE, unit = "day")) %>%
group_by(Week, Areas) %>%
summarise(Units = mean(Units))
# Plotting the weekly heatmap with inverted viridis color palette
ggplot(selected_data_daily, aes(x = Week, y = Areas, fill = Units)) +
geom_tile(color = "white") +
scale_fill_viridis(option = "plasma", trans = "reverse") +  # Invert viridis color scale
labs(
title = "Daily Solar Readings",
x = "Daily",
y = "Areas",
fill = "Units"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1)
)
# Plotting the weekly heatmap with inverted viridis color palette
ggplot(selected_data_weekly, aes(x = Week, y = Areas, fill = Units)) +
geom_tile(color = "white") +
scale_fill_viridis(option = "plasma", trans = "reverse") +  # Invert viridis color scale
labs(
title = "Weekly Solar Readings",
x = "Week",
y = "Areas",
fill = "Units"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1)
)
library(dplyr)
library(timetk)
# Convert DATE to Date type if not already done
solarData_long <- solarData_long %>%
mutate(DATE = as.Date(DATE))
# Select 6 random areas
set.seed(123)  # Setting seed for reproducibility
selected_areas <- solarData_long %>%
distinct(Areas) %>%
sample_n(6) %>%
pull(Areas)
# Filter the dataset for the selected areas
filtered_data <- solarData_long %>%
filter(Areas %in% selected_areas)
# Create faceted time series plot using timetk
filtered_data %>%
plot_time_series(
.date_var = DATE,
.value = Units,
.facet_var = Areas,
.facet_ncol = 2,
.facet_scales = "free"
)
